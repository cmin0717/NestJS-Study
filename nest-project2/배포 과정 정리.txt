TS의 배포는 이런 흐름으로 진행된다.

1. Pm2 설치 https://github.com/Unitech/pm2
Pm2란? 
Node.js 애플리케이션용 생산 프로세스 관리자
이를 통해 응용 프로그램을 영원히 활성 상태로 유지하고 가동 중지 시간 없이 다시 로드하고 일반적인 시스템 관리 작업을 용이하게 할 수 있습니다.

------------------------------------------ git에 올리기전에 코드 준비 (파일 수정, 에러 확인, pm2 확인) --------------------------------------------

- npm i pm2 -g

- pm2 list // 현재 pm2의 프로세스 리스트를 볼수있다.

// 배포를 하기위해 변경해야할것들(각 프로젝트마다 다르겠죠?) 그걸 일단 변경시킨다.
// package.json에서 "start:prod": "node dist/main", 부분을 "start:prod": "pm2 start dist/main"로 변경해준다.
// 나중에 인스턴스 생성후 클라우드에서 실행할때는 node로 실행하는게 아닌 pm2로 실행해야 하니깐
- package.json 수정, .env MODE=‘prod’로 수정, PORT=80으로 수정

// build전에 debug로 코드에 오류가 있는지 debug하여 에러가 있는지 확인한다.
- npm run start:debug 

// 코드를 빌드
- npm run build

// 위에서 pm2로 설정했기에 pm2에서 프로세스로 빌드한 코드를 실행한다.
- npm run start:prod

// pm2에서 정상 작동하는지 확인해본다.
- pm2 list // 현재 pm2에서 실행되는 프로세스를 볼수있다.

// 정상 작동하면 pm2에서 프로세스를 kill해주고 정리한다.
- pm2 kill

------------------------------------------ github에 코드 올리기 (파일 수정, 에러 확인, pm2 확인) --------------------------------------------

- .env는 .gitignore에 추가해서 올리기 // 환경 변수는 노출되어서는 안되기 때문에

- .gitignore에서 /dist는 제거후 올려야한다. // dist가 필요한데 그걸 넣어두면 안되니깐

- package.json, package-lock.json도 같이 올려준다.

// TS가 실행될때는 JS로 컴파일되어 실제로는 JS가 실행된다. 그렇기에 컴파일된 폴더 dist만 git에 올리는것
// 다 올려도 상관은 없다. 근데 굳이 배포할때 효율성 떨어지게 다 올릴 필요는 없으니깐
- dist만 따로 빼서

------------------------------------------ 클라우드 서비스를 이용하여 인스턴스 생성 (VPS : 가상 사설 서버 구축) ---------------------------------------

// AWS EC2, AWS Lightsail, GCP, Azure 등 클라우드 서비스를 이용하여 VPS를 생성한다.


----------------------------------------------------- 인스턴스에서 서버 설정  ----------------------------------------------------------

- ssh를 사용하여 인스턴스와 연결

// apt-get이란 프로그램등을 설치해주고 버전관리도 해주는 매니저 시스템(npm같은느낌?)
// 인스턴스는 기본적인것만 있는걸로 시작하니 일단 apt-get를 업데이트 해주어야한다.
- sudo apt-get update 

// 업데이트후 업그레이드
- sudo apt-get -y upgrade

// 빌드에서 담당하는 핵심적인 패키지 (npm을 통한 node를 개발할 때 발생하는 에러를 방지하기 위해)
- sudo apt-get install build-essential

-- 인스턴스에 node js 설치 --
// 우분투에서 nodejs를 다운 받기 위해서는 PPA(Personal Package Archive 개인 패키지 저장소)에서 받아야한다.
// apt-get install은 우분투 공식 패키지 저장소에 있는것만 받을수 있다.
// 하지만 nodejs는 없어서? 다른 패키지 저장소에서 다운 받아야한다.

// PPA에 접근하기 위해 웹 사이트에서 패키지를 다운받을수 있게하는 curl를 설치한다.
- sudo apt-get install curl

// curl를 사용하여 웹으로 PPA주소에 접근한다. (setup_버전.x) 무슨 버전을 받을지 정할수있다.
- curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash --

// nodejs 설치 (PPA에서 패키지를 가져왔기에 nodejs설치 가능)
- sudo apt-get install -y nodejs

// git에서 코드를 가져오기 위해 git 설치
- sudo apt-get install git

// vim설치 (vim이란 쉘에서 코드에디팅을 할수있게 해주는것이다.)
// 서버에서 env파일을 설정하거나 등등 코드를 변경하거나 추가할때 사용하게 된다.
- sudo apt-get install vim

// 인스턴스에 git 설정(안해도 무관하다.)
- touch .gitconfig

- git config --global user.name 깃닉네임(예: amamov)

-  git config --global user.email 깃이메일(예: amamov@kakao.com)

-  git config --global --list // git 세팅을 확인할 수 있는 명령어

// git에서 빌드후 올린 코드를 인스턴스에 클론 받아온다.
// 클론후 npm를 이용하여 프로젝트 세팅
- git clone <프로젝트>

- cd <프로젝트>

- npm i

- sudo npm i -g @nestjs/cli

- sudo npm i -g pm2

// vim을 이용하여 .env 파일을 생성한다.
// vim 입력시 i 입력, 입력이 끝나면 esc, vim 저장 후 종료는 :wq! 입력
- vi .env (환경변수 붙여 넣기)

// 모든 설치와 세팅이 끝나면 서버 실행(현재 세팅이면 pm2로 실행한다.)
- sudo npm run start:prod

// 인스턴스의 고정 퍼블릭 주소를 가지고 DNS서비스를 이용하여 도메인으로 배포한다.
4. 고정 퍼블릭 주소 할당받기
도메인 서비스 : AWS ROUTH 53, 가비아, https://xn--220b31d95hq8o.xn--3e0b707e/ 등등 있다.
https://xn--220b31d95hq8o.xn--3e0b707e/는 무료 도메인 사이트이다.(토이 프로젝트에서 사용하기 좋을듯)